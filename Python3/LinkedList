# Singly-linked lists are already defined with this interface:
# class ListNode(object):
#   def __init__(self, x):
#     self.value = x
#     self.next = None
#

#This code challenge is to remove a target number from a linked list.
#So my approach is to remove the node from the list with the target value.
#To do that I would take the previous node pointer and point to the next node.
#I did not delete the first node immediately, but I think I can make this code more efficient by removing k as it comes up.
#right now the code is about O(n) + O(1) I thought that is efficient enough, but I think I can make it shorter

def printList(l):
    if l:
        if l.next:
            print(l.value, end=', ')
        else:
            print(l.value, end='')
        printList(l.next)
        
def printer(l):
    print('[', end='')
    printList(l)
    print(']', end='')

def removeKFromList(l, k):
    c = l
    while c:
        if c.next and c.next.value == k:
            c.next = c.next.next
        else:
            c = c.next
    if l and l.value == k:
        return l.next
    else:
        return l    
    printer(l)
    return l
    
